version: 2.1

# slackへの通知のためにorbを使用する
orbs:
  slack: circleci/slack@3.4.2

# 共通事項の設定
executors:
  with_db:
    docker:
      - image: circleci/ruby:2.7.1-node-browsers
        environment:
          - DB_HOST_TEST: 127.0.0.1
          - DB_USERNAME: 'root'
          - BUNDLE_PATH: vendor/bundle
          - RAILS_ENV: test
          - CC_TEST_REPORTER_ID: 734c8287e45eedd43d806e2de2424fff1c80fc348db0a1e3654ff32da0557068
      - image: circleci/mysql:5.7-ram
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: '%'
    working_directory: ~/SiteStocker

# 処理内容
jobs:
  build:
    executor: with_db
    steps:
      - checkout
      - restore_cache:
          name: gemキャッシュの復元
          keys:
            - v1-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: gemのインストール
          command: bundle check --path vendor/bundle || bundle install --deployment
      - save_cache:
          name: gemキャッシュの保存
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: データベースの起動を待機
          command: |
            dockerize -wait \
            tcp://${DB_HOST_TEST}:3306 -timeout 120s
      - run:
          name: CircleCI用のDB設定に切り替え
          command: mv config/database.yml.ci config/database.yml
      - run:
          name: データベースのセットアップ
          command: bundle exec rails db:create
      - run:
          name: Code Climateへのテストカバレッジ送信のためにtest-reporterを設定
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: RSpecを実行
          command: |
            ./cc-test-reporter before-build
            bundle exec rspec
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      - run:
          name: RuboCopを実行
          command: bundle exec rubocop
      # 自動デプロイ
      - add_ssh_keys:
          fingerprints:
            - 'ca:5a:fe:7f:70:2c:93:9c:6b:85:35:63:15:16:36:ef'
      - deploy:
          name: Capistrano deploy
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              exit 0
            fi
            bundle exec cap production deploy
      # slackに結果を送信
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH のデプロイが完了しました\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH のデプロイが失敗しました\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_WEBHOOK}'

# 実行順序の制御
workflows:
  version: 2.1
  main:
    jobs:
      - build
